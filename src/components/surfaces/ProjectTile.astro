---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getAverageColor } from "../../utils/average-colour";
import ExternalLink from "../input/ExternalLink.astro";

interface Props {
    id: string;
    data: CollectionEntry<"projects">["data"];
    index: number;
}

const { data, id, index } = Astro.props;

const { r, g, b } = await getAverageColor(data.image.rawUrl);
const shadowColor = `rgb(${r} ${g} ${b})`;

const loading = index < 4 ? "eager" : "lazy";
---

<li class="project">
    <a href={`/work/${id}`}>
        <Image
            src={data.image.src}
            alt={data.image.alt}
            class="cover"
            layout="constrained"
            loading={loading}
        />
        <div class="info">
            <h3>{data.title}</h3>
            <ExternalLink href={data.url} />
        </div>
    </a>
</li>

<style define:vars={{ shadowColor, index, id }}>
    a {
        text-decoration: none;
    }

    h3 {
        margin: 0;

        font-size: 16px;
        font-weight: 400;
        color: var(--fg);
        text-transform: uppercase;

        text-box: trim-both cap alphabetic;
    }

    .project {
        list-style: none;
        position: relative;
        isolation: isolate;

        overflow: clip;
        padding: 1px;

        display: flex;

        border-radius: 18px;
        background: linear-gradient(
            180deg,
            oklch(0.57 0 0) 0%,
            oklch(0.43 0 0) 100%
        );

        box-shadow: 0px 4px 12px oklch(0 0 0 / 0.25);
        transition:
            scale var(--spring-duration) var(--spring-easing),
            box-shadow 0.1s linear;

        view-transition-name: var(--id);

        @media (hover: hover) {
            &:hover {
                scale: 1.02;
                box-shadow: 0px -1px 30px
                    oklch(from var(--shadowColor) l c h / calc(alpha - 0.5));
            }
        }

        &:active {
            scale: 0.98;
            box-shadow: 0px 0px 4px oklch(0 0 0 / 0.25);
        }

        &::after {
            content: "";
            position: absolute;
            inset: auto 1px 1px 1px;
            height: 40%;
            z-index: 0;

            border-radius: 17px;
            background-color: oklch(0 0 0 / 0.5);
            mask: linear-gradient(180deg, transparent 0%, oklch(0 0 0) 90%);
            backdrop-filter: blur(5px);

            pointer-events: none;
        }
    }

    .cover {
        border-radius: 17px;
    }

    .info {
        position: absolute;
        inset: auto 0 0 0;
        padding: 12px;
        z-index: 1;

        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        justify-content: space-between;
        gap: 8px;
    }
</style>
