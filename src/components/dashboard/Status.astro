---
type Status = "available" | "occupied";

interface Props {
    status: Status;
}

const { status } = Astro.props;

const statusMessages: Record<Status, string> = {
    available: "Available for work",
    occupied: "Currently unavailable",
};

const statusColor =
    status === "available"
        ? "oklch(0.87 0.25 148.1)"
        : "oklch(0.82 0.16 74.94)";
---

<div class="box">
    <h2>Status</h2>
    <div class="status">
        <div class="status__indicator"></div>
        <span>{statusMessages[status]}</span>
    </div>
</div>

<style define:vars={{ statusColor }}>
    h2 {
        margin: 0;
        font-size: 16px;
        font-weight: 400;
        color: var(--fg);
        text-transform: uppercase;
    }

    .box {
        grid-area: status;

        padding: 24px;
        overflow: hidden;

        display: flex;
        flex-flow: column nowrap;
        align-items: center;
        gap: 12px;

        background-color: var(--container);
        border: 1px solid var(--container-stroke);
        border-radius: 42px;
        box-shadow: 0px 2px 4px oklch(0 0 0 / 0.25) inset;
    }

    .status {
        padding: 5px 10px 5px 7px;
        z-index: 1; /* needed for pseudo-element stacking */

        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        justify-content: center;
        gap: 8px;

        border: 1px solid oklch(0.27 0 0);
        border-radius: 18px;

        & > span {
            font-size: 12px;
            color: var(--fg);
            text-transform: uppercase;
        }
    }

    .status__indicator {
        position: relative;

        width: 10px;
        height: 10px;
        flex-shrink: 0;

        border-radius: 50%;
        background-color: var(--statusColor);

        &::after {
            content: "";
            z-index: -1;

            position: absolute;
            inset: -4px;

            border-radius: 50%;
            background-color: oklch(
                from var(--statusColor) l c h / calc(alpha - 0.5)
            );

            animation: 2s linear infinite pulse;
        }
    }

    @keyframes pulse {
        0% {
            scale: 0;
            opacity: 1;
        }

        80% {
            scale: 1;
            opacity: 1;
        }

        100% {
            scale: 1;
            opacity: 0;
        }
    }
</style>
