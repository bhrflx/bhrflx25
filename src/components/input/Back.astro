---
import ArrowLeft from "../../assets/icons/arrow-left.svg";

interface Props {
    href?: string;
}

const { href = "/" } = Astro.props;
---

<a
    href={href}
    aria-label="Press your escape key to return to the previous page."
    class="back"
>
    <div class="button">
        <svg
            viewBox="0 0 200 200"
            xmlns="http://www.w3.org/2000/svg"
            class="filter"
        >
            <filter id="noise">
                <feTurbulence
                    type="fractalNoise"
                    baseFrequency="0.85"
                    numOctaves="3"
                    stitchTiles="stitch"
                >
                </feTurbulence>
            </filter>
        </svg>

        <div class="button__inner">
            <ArrowLeft width={16} height={16} fill="currentColor" />
        </div>
    </div>
    <span>[ESC]</span>
</a>

<script>
    const buttons = document.querySelectorAll(".back .button");
    const links = document.querySelectorAll(".back");

    document.addEventListener("keydown", (e) => {
        buttons.forEach((button) => {
            if (button instanceof HTMLElement) {
                if (e.code === "Escape") {
                    button.classList.add("pressed");
                }
            }
        });
    });

    document.addEventListener("keyup", (e) => {
        buttons.forEach((button) => {
            button.classList.remove("pressed");
            const link = button.closest("a");
            const href = link?.href ?? "/";

            if (e.code === "Escape") {
                window.location.href = href;
            }
        });
    });

    links.forEach((link) => {
        if (!(link instanceof HTMLAnchorElement)) return;

        link.addEventListener("pointerdown", () => {
            navigator.vibrate(5);
        });

        link.addEventListener("pointerup", () => {
            navigator.vibrate(10);
        });
    });
</script>

<style>
    a {
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        gap: 5px;

        border-radius: 64px;
        background-color: oklch(0.27 0 0);

        font-size: 10px;
        color: oklch(1 0 0 / 0.5);
        text-decoration: none;
    }

    span {
        display: none;
    }

    .button {
        position: relative;

        padding: 1px;
        border-radius: 21px;
        background: linear-gradient(
            180deg,
            oklch(0.74 0 0) 0%,
            oklch(0.45 0 0) 100%
        );
        box-shadow: 0 5px 12px 0 oklch(0 0 0 / 0.5);

        transition:
            scale var(--spring-duration) var(--spring-easing),
            box-shadow var(--spring-duration) var(--spring-easing);

        &:hover {
            scale: 0.98;
            box-shadow: 0 2px 8px 0 oklch(0 0 0 / 0.5);
        }

        &:active {
            scale: 0.95;
            box-shadow: 0 1px 4px 0 oklch(0 0 0 / 0.5);
        }
    }

    .pressed {
        scale: 0.95;
        box-shadow: 0 2px 4px 0 oklch(0 0 0 / 0.5);
    }

    .button__inner {
        position: relative;
        overflow: clip;

        padding: 12px;
        border-radius: 20px;
        display: flex;
        flex-flow: row nowrap;
        align-items: center;
        justify-content: center;
        gap: 5px;

        color: var(--fg);
        background: linear-gradient(
            180deg,
            oklch(0 0 0) 0%,
            oklch(0.4091 0 0) 100%
        );

        &::after {
            content: "";
            position: absolute;
            inset: 0;
            filter: url(#noise) saturate(0) contrast(170%);
            mix-blend-mode: hard-light;
            opacity: 0.3;
        }
    }

    .filter {
        width: 1px;
        height: 1px;
        position: absolute;
        inset: 0;
    }

    @media (hover: hover) and (pointer: fine) {
        a {
            padding-right: 12px;
        }

        span {
            display: inline-block;
        }
    }
</style>
